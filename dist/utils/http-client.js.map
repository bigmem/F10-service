{"version":3,"sources":["utils/http-client.js"],"names":["parseParam","params","results","Object","keys","forEach","paramName","push","pop","join","doGet","url","queryString","includes","method","headers","then","res","json","doPost","body","JSON","stringify","undefined","request","config","httpMethod","serviceUrl"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,UAAU,GAAIC,MAAD,IAAY;AAC3B,QAAMC,OAAO,GAAG,EAAhB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA6BC,SAAD,IAAe;AACvCJ,IAAAA,OAAO,CAACK,IAAR,CAAaD,SAAb,EAAwB,GAAxB,EAA6BL,MAAM,CAACK,SAAD,CAAnC,EAAgD,GAAhD;AACH,GAFD;AAIAJ,EAAAA,OAAO,CAACM,GAAR;AAEA,SAAON,OAAO,CAACO,IAAR,CAAa,EAAb,CAAP;AACH,CAVD,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeC,KAAf,CAAqBC,GAArB,EAA0BV,MAA1B,EAAkC;AAC9B,MAAIW,WAAW,GAAGZ,UAAU,CAACC,MAAD,CAA5B;;AAEA,MAAIU,GAAG,CAACE,QAAJ,CAAa,GAAb,CAAJ,EAAuB;AACnBD,IAAAA,WAAW,GAAI,IAAGA,WAAY,EAA9B;AACH,GAFD,MAEO;AACHA,IAAAA,WAAW,GAAI,IAAGA,WAAY,EAA9B;AACH;;AAED,SAAO,wBAAO,GAAED,GAAI,GAAEC,WAAY,EAA3B,EAA8B;AACjCE,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAFwB,GAA9B,EAKJC,IALI,CAKEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALT,CAAP;AAMH;;AAED,eAAeC,MAAf,CAAsBR,GAAtB,EAA2BV,MAA3B,EAAmC;AAC/B,SAAO,wBAAMU,GAAN,EAAW;AACdG,IAAAA,MAAM,EAAE,MADM;AAEdM,IAAAA,IAAI,EAAEnB,MAAM,GAAGoB,IAAI,CAACC,SAAL,CAAerB,MAAf,CAAH,GAA4BsB,SAF1B;AAGdR,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHK,GAAX,EAMJC,IANI,CAMEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANT,CAAP;AAOH;;AAED,eAAeM,OAAf,CAAuBC,MAAvB,EAA+BxB,MAA/B,EAAuC;AACnC,QAAM;AACFyB,IAAAA;AADE,MAEFD,MAFJ;;AAIA,UAAQC,UAAR;AACI,SAAK,KAAL;AACI,aAAOhB,KAAK,CAACe,MAAM,CAACE,UAAR,EAAoB1B,MAApB,CAAZ;;AACJ,SAAK,MAAL;AACI,aAAOkB,MAAM,CAACM,MAAM,CAACE,UAAR,CAAb;AAJR;AAMH;;eAEc;AACXH,EAAAA;AADW,C","sourcesContent":["import fetch from \"node-fetch\";\n\nconst parseParam = (params) => {\n    const results = [];\n\n    Object.keys(params).forEach((paramName) => {\n        results.push(paramName, \"=\", params[paramName], \"&\");\n    });\n\n    results.pop();\n\n    return results.join(\"\");\n};\n\n\n// class HttpClient {\n//\n//     // constructor(baseUrl) {\n//     //     this.baseUrl = baseUrl;\n//     // }\n//     //\n//     // setBaseUrl(baseUrl) {\n//     //     this.baseUrl = baseUrl;\n//     // }\n//     //\n//     // getBaseUrl() {\n//     //     return this.baseUrl;\n//     // }\n//     //\n//     // async get(path, params) {\n//     //     return HttpClient.doGet(`${this.baseUrl}${path}`, params);\n//     //\n//     // }\n//     //\n//     // async post(path, params) {\n//     //     return HttpClient.doPost(`${this.baseUrl}${path}`, params);\n//     // }\n//     //\n//     static async doGet(url, params) {\n//         let queryString = parseParam(params);\n//\n//         if (url.includes(\"?\")) {\n//             queryString = `&${queryString}`;\n//         } else {\n//             queryString = `?${queryString}`;\n//         }\n//\n//         return fetch(`${url}${queryString}`, {\n//             method: \"get\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//         }).then((res => res.json()));\n//     }\n//\n//     static async doPost(url, params) {\n//         return fetch(url, {\n//             method: \"post\",\n//             body: params ? JSON.stringify(params) : undefined,\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//         }).then((res => res.json()));\n//     }\n//\n//     static async request(config, params) {\n//         const {\n//             httpMethod,\n//         } = config;\n//\n//         switch (httpMethod) {\n//             case \"get\":\n//                 return HttpClient.doGet(config.serviceUrl, params);\n//             case \"post\":\n//                 return HttpClient.doPost(config.serviceUrl);\n//         }\n//     }\n//\n// }\n//\n//\n// export function setBaseUrl(baseUrl) {\n//     httpClient.setBaseUrl(baseUrl);\n// }\n//\n// export function getBaseUrl() {\n//     return httpClient.baseUrl;\n// }\n//\n// export async function get(url, params) {\n//     const queryString = parseParam(params);\n//\n//     return fetch(`${this.baseUrl}${path}`, {\n//         method: \"get\",\n//         body: params ? JSON.stringify(params) : undefined,\n//         headers: {\n//             \"Content-Type\": \"application/json\",\n//         },\n//     }).then((res => res.json()));\n// }\n//\n// export async function post(url, params) {\n//     return fetch(``, {\n//         method: \"post\",\n//         body: params ? JSON.stringify(params) : undefined,\n//         headers: {\n//             \"Content-Type\": \"application/json\",\n//         },\n//     }).then((res => res.json()));\n// }\n//\n// const httpClient = new HttpClient();\nasync function doGet(url, params) {\n    let queryString = parseParam(params);\n\n    if (url.includes(\"?\")) {\n        queryString = `&${queryString}`;\n    } else {\n        queryString = `?${queryString}`;\n    }\n\n    return fetch(`${url}${queryString}`, {\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    }).then((res => res.json()));\n}\n\nasync function doPost(url, params) {\n    return fetch(url, {\n        method: \"post\",\n        body: params ? JSON.stringify(params) : undefined,\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    }).then((res => res.json()));\n}\n\nasync function request(config, params) {\n    const {\n        httpMethod,\n    } = config;\n\n    switch (httpMethod) {\n        case \"get\":\n            return doGet(config.serviceUrl, params);\n        case \"post\":\n            return doPost(config.serviceUrl);\n    }\n}\n\nexport default {\n    request,\n};\n"],"file":"http-client.js"}